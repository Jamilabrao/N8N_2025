{"createdAt":"2024-12-19T14:37:29.879Z","updatedAt":"2024-12-19T18:55:02.678Z","id":"FQJLyuz0p5kBjQ5i","name":"RESUMO GRUPO - RANK","active":false,"isArchived":false,"nodes":[{"parameters":{"jsCode":"// Obtenha os dados da variável diretamente\nconst data = $('Pegando mensagens do grupo').item.json.messages.records || [];\n\n// Obtenha a data de hoje em formato UTC (sem horário)\nconst today = new Date();\ntoday.setHours(0, 0, 0, 0);\n\n// Filtrar mensagens cuja data seja igual à de hoje\nconst filteredMessages = data.filter(record => {\n    const messageDate = new Date(record.messageTimestamp * 1000); // Convertendo timestamp para milissegundos\n    messageDate.setHours(0, 0, 0, 0); // Removendo a hora para comparar só o dia\n\n    return messageDate.getTime() === today.getTime();\n});\n\n// Contabilizar as mensagens por participante\nconst participantCount = {};\n\n// Contagem das mensagens por participante\nfilteredMessages.forEach(record => {\n    let participant = record.key?.participant; // Verifique se a chave existe\n    const pushName = record.pushName || \"Nome não identificado\"; // Captura o pushName\n\n    if (participant) {\n        // Remove o sufixo @s.whatsapp.net\n        participant = participant.replace('@s.whatsapp.net', '');\n\n        if (!participantCount[participant]) {\n            participantCount[participant] = {\n                count: 0,\n                pushName: pushName // Armazena o pushName\n            };\n        }\n        participantCount[participant].count++;\n    }\n});\n\n// Ordenar participantes pela quantidade de mensagens (do maior para o menor)\nconst sortedParticipants = Object.entries(participantCount)\n    .sort((a, b) => b[1].count - a[1].count) // Ordena pela quantidade de mensagens\n    .slice(0, 3); // Pega os 3 primeiros\n\n// Gerar a mensagem única com os três melhores participantes\nconst message = sortedParticipants.map((participant, index) => {\n    const medal = [\"🥇\", \"🥈\", \"🥉\"][index]; // Seleciona o emoji da medalha com base no índice\n    const pushName = `*${participant[1].pushName}*`; // Adiciona asteriscos ao pushName\n    const count = participant[1].count; // Pega a contagem de mensagens\n    return `${medal} ${pushName}\\n> Com ${count} mensagens`;\n}).join('\\n\\n'); // Junta as mensagens com quebras de linha\n\n// Retornar a mensagem única como resultado\nreturn [\n    {\n        json: {\n            mensagem: message\n        }\n    }\n];"},"id":"6f1891d1-fd30-422f-af3c-92655521ce07","name":"Top 3 membros","type":"n8n-nodes-base.code","typeVersion":2,"position":[2392,720]},{"parameters":{"jsCode":"// Obtenha os dados do nó anterior\nconst data = $('Pegando mensagens do grupo').item.json.messages.records || [];\n\n// Obtenha a data de hoje em formato UTC (sem horário)\nconst today = new Date();\ntoday.setHours(0, 0, 0, 0);\n\n// Filtrar mensagens cuja data seja igual à de hoje, cujo tipo seja \"conversation\" \n// e que não estejam marcadas como DELETED\nconst filteredMessages = data.filter(record => {\n    const messageDate = new Date(record.messageTimestamp * 1000); // Convertendo timestamp para milissegundos\n    messageDate.setHours(0, 0, 0, 0); // Removendo a hora para comparar só o dia\n\n    // Verificar se a mensagem foi deletada\n    const isDeleted = record.MessageUpdate && record.MessageUpdate.some(update => update.status === \"DELETED\");\n\n    // Adicionar logs para depuração\n    console.log(`Mensagem: ${record.message ? record.message.conversation : 'N/A'}`);\n    console.log(`Data da Mensagem: ${messageDate}`);\n    console.log(`É Deletada: ${isDeleted}`);\n    \n    return (\n        messageDate.getTime() === today.getTime() &&\n        record.messageType === \"conversation\" &&\n        !isDeleted // Ignorar mensagens deletadas\n    );\n});\n\n// Ordenar as mensagens pela data de forma crescente (mais antiga para mais nova)\nfilteredMessages.sort((a, b) => a.messageTimestamp - b.messageTimestamp);\n\n// Retornar apenas os campos necessários, ajustando o formato conforme solicitado\nconst result = filteredMessages.map(record => {\n    const telefoneMembro = record.key.participant ? record.key.participant.replace('@s.whatsapp.net', '') : 'Número não disponível';\n    const response = {\n        json: {\n            \"Membro\": record.pushName || \"Nome não identificado\", // Utilizar o pushName\n            \"Telefone do Membro\": telefoneMembro, // Telefone sem o sufixo\n            \"Mensagem\": record.message.conversation || null, // Mensagem de conversa\n        }\n    };\n\n    // Se existir contextInfo, adicionar o participant do contextInfo também\n    if (record.contextInfo && record.contextInfo.participant) {\n        response.json['Resposta para'] = record.contextInfo.participant;\n    }\n\n    return response;\n});\n\n// Retorne o resultado\nconsole.log(\"Mensagens Filtradas:\", result);\nreturn result;"},"id":"72abaa66-a4f4-457c-b15e-2ad690993127","name":"Separa as mensagens de hoje","type":"n8n-nodes-base.code","typeVersion":2,"position":[1992,720]},{"parameters":{"method":"POST","url":"={{ $('Credenciais').item.json.baseUrl }}/chat/findMessages/{{ $('Credenciais').item.json.instance }}","sendHeaders":true,"headerParameters":{"parameters":[{"name":"apikey","value":"={{ $('Credenciais').item.json.apikey }}"}]},"sendBody":true,"specifyBody":"json","jsonBody":"={\n    \"where\": {\n        \"key\": {\n            \"remoteJid\": \"{{ $('Grupos').item.json.groupJids }}\"\n        }\n    },\n    \"page\": 1,\n    \"offset\": {{ $('Credenciais').item.json.offset }}\n}","options":{}},"id":"36c353c5-8818-41d2-97bf-40ec658b883d","name":"Pegando mensagens do grupo","type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1792,720]},{"parameters":{"aggregate":"aggregateAllItemData","destinationFieldName":"=Mensagens do grupo","options":{}},"id":"64079b5c-bbd8-4eef-ba06-2636c766f86d","name":"Juntando Mensagens","type":"n8n-nodes-base.aggregate","typeVersion":1,"position":[2192,720]},{"parameters":{"jsCode":"// Obtenha os dados da variável diretamente\nconst data = $('Pegando mensagens do grupo').item.json.messages.records || [];\n\n// Obtenha a data de hoje em formato UTC (sem horário)\nconst today = new Date();\ntoday.setHours(0, 0, 0, 0);\n\n// Filtrar mensagens cuja data seja igual à de hoje\nconst filteredMessages = data.filter(record => {\n    const messageDate = new Date(record.messageTimestamp * 1000); // Convertendo timestamp para milissegundos\n    messageDate.setHours(0, 0, 0, 0); // Removendo a hora para comparar só o dia\n\n    return messageDate.getTime() === today.getTime();\n});\n\n// Calcular o total de mensagens de hoje\nconst totalMessages = filteredMessages.length;\n\n// Retornar o total de mensagens\nreturn [\n    {\n        json: {\n            totalMensagens: totalMessages\n        }\n    }\n];\n"},"id":"8aba1ee9-dbbd-4d67-ad2c-e59e65b2c536","name":"Total de mensagens","type":"n8n-nodes-base.code","typeVersion":2,"position":[2592,720]},{"parameters":{"jsCode":"// Criação do array de mensagens\nconst messages = [\n  `Hoje, o dia foi agitado com *${items[0].json['totalMensagens']} mensagens* enviadas! 💬`,\n  `Uau! Já trocamos *${items[0].json['totalMensagens']} mensagens* hoje! 🔥`,\n  `Que dia cheio! *${items[0].json['totalMensagens']} mensagens* passaram por aqui! 🚀`,\n  `Hoje tivemos *${items[0].json['totalMensagens']} mensagens* trocadas, o que não é pouca coisa! 🎉`,\n  `O dia de hoje foi super produtivo com *${items[0].json['totalMensagens']} mensagens* enviadas! 💥`,\n  `Com *${items[0].json['totalMensagens']} mensagens* trocadas, o dia foi um sucesso! 🙌`,\n  `Hoje conseguimos trocar *${items[0].json['totalMensagens']} mensagens* – que movimentação! ⚡`,\n  `Um dia agitado com *${items[0].json['totalMensagens']} mensagens* enviadas! 💌`,\n  `Que energia! Já foram *${items[0].json['totalMensagens']} mensagens* enviadas hoje! 🔝`,\n  `O dia foi movimentado com *${items[0].json['totalMensagens']} mensagens* trocadas! Vamos para o próximo! 💪`,\n  `Eita que hoje tivemos *${items[0].json['totalMensagens']} mensagens* no nosso grupo`\n];\n\n// Sorteio aleatório\nconst randomMessage = messages[Math.floor(Math.random() * messages.length)];\n\n// Retornar o resultado para o n8n\nreturn [{ json: { randomMessage } }];\n"},"id":"64530a0e-fbb9-4f73-8554-9293059a27b3","name":"Mensagem de Total de mensagens","type":"n8n-nodes-base.code","typeVersion":2,"position":[2792,720]},{"parameters":{"method":"POST","url":"={{ $('Credenciais').item.json.baseUrl }}/message/sendText/{{ $('Credenciais').item.json.instance }}","sendHeaders":true,"headerParameters":{"parameters":[{"name":"apikey","value":"={{ $('Credenciais').item.json.apikey }}"}]},"sendBody":true,"bodyParameters":{"parameters":[{"name":"number","value":"={{ $('Tratando dados do loop').item.json['remoteJid (grupo)'] }}"},{"name":"text","value":"={{ $('Gera resumo').item.json.message.content.replace(/\\*\\*/g, '*') }}\n"}]},"options":{}},"id":"c3adce21-cda7-4425-b393-a42bdcee5af1","name":"Enviando mensagem 2","type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[2352,920]},{"parameters":{"options":{}},"id":"45084f49-0de2-4ccc-a43d-4ac748e16dda","name":"Loop Over Items","type":"n8n-nodes-base.splitInBatches","typeVersion":3,"position":[1392,620]},{"parameters":{"assignments":{"assignments":[{"id":"1ed68fd6-9020-4eeb-8e17-78417291cf4c","name":"remoteJid (grupo)","value":"={{ $json.groupJids || $json.id}}","type":"string"}]},"options":{}},"id":"2b7280fd-2ddd-4e22-88ab-f71f9e12541c","name":"Tratando dados do loop","type":"n8n-nodes-base.set","typeVersion":3.4,"position":[1592,720]},{"parameters":{"method":"POST","url":"={{ $('Credenciais').item.json.baseUrl }}/message/sendText/{{ $('Credenciais').item.json.instance }}","sendHeaders":true,"headerParameters":{"parameters":[{"name":"apikey","value":"={{ $('Credenciais').item.json.apikey }}"}]},"sendBody":true,"bodyParameters":{"parameters":[{"name":"number","value":"={{ $('Tratando dados do loop').item.json['remoteJid (grupo)'] }}"},{"name":"text","value":"=💬 *Resumo do dia no Grupo*\n{{ $('Mensagem de Total de mensagens').item.json.randomMessage }}\n\n🏆 *Top 3 membros mais ativos hoje*:\n\n{{ $('Top 3 membros').item.json.mensagem }}"}]},"options":{}},"id":"15af06aa-e8b5-498a-8d9b-4c8037994194","name":"Enviando mensagem 1","type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1952,920],"retryOnFail":true,"waitBetweenTries":2500},{"parameters":{"rule":{"interval":[{"triggerAtHour":22}]}},"id":"7c6325fb-ce62-4e73-942d-618467c75cb4","name":"Iniciar todas 22h","type":"n8n-nodes-base.scheduleTrigger","typeVersion":1.2,"position":[792,520]},{"parameters":{"assignments":{"assignments":[{"id":"361f2ed1-b2c8-44fd-926c-5a8d9d7387d4","name":"baseUrl","value":"https://whatsapi.typebot.pro","type":"string"},{"id":"9df17754-2e22-411f-adfc-6d9d5fd2adb2","name":"instance","value":"ASGARDACADEMY","type":"string"},{"id":"d8298933-545f-4fd7-a56c-a70fafa1c315","name":"apikey","value":"57ec53c5bd97b369472d545052e77007","type":"string"},{"id":"3aceebf0-a0f3-4bd3-be1a-80ec53707e2f","name":"offset","value":"1000","type":"string"}]},"options":{}},"id":"8fb7ef63-7271-4759-b060-40536e4a4975","name":"Credenciais","type":"n8n-nodes-base.set","typeVersion":3.4,"position":[992,520]},{"parameters":{"amount":2},"id":"bb0e1b31-714e-456d-a39e-5d64bbf3c163","name":"Espera 2 segundos","type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[2152,920],"webhookId":"9f66f1f7-6b99-4e06-a657-a5d038d5fb9f"},{"parameters":{"amount":2},"id":"46f9c7d3-64a1-4c25-b84c-497a9d6f603f","name":"Espera 30 segundos","type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[2552,920],"webhookId":"9f66f1f7-6b99-4e06-a657-a5d038d5fb9f"},{"parameters":{},"id":"6b877ea7-25ab-4075-abe9-5a854ed21e5f","name":"FIM","type":"n8n-nodes-base.noOp","typeVersion":1,"position":[1592,520]},{"parameters":{"jsCode":"const groupJids = [\n    \"120363127737464835@g.us\",\n    \"120363260323910075@g.us\"\n];\n\n// Gerando a lista com o formato desejado\nconst result = groupJids.map(id => `${id}`);\n\n// Criando a estrutura de saída no formato correto para o n8n\nreturn result.map(item => {\n    return {\n        json: {\n            groupJids: item\n        }\n    };\n});\n"},"id":"fc8d8e57-6344-4f45-bfef-83fc32855985","name":"Grupos","type":"n8n-nodes-base.code","typeVersion":2,"position":[1192,520]},{"parameters":{"url":"={{ $('Credenciais').item.json.baseUrl }}/group/fetchAllGroups/{{ $('Credenciais').item.json.instance }}?getParticipants=false","sendHeaders":true,"headerParameters":{"parameters":[{"name":"apikey","value":"={{ $('Credenciais').item.json.apikey }}"}]},"options":{}},"id":"55e5b535-a904-4b22-b9c7-a3335c97e5e2","name":"Puxar Grupos","type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[880,920]},{"parameters":{"content":"## Altere aqui","height":251.9159908779343,"width":221.87572010857625,"color":3},"id":"daf6d80f-0209-4bca-a8b9-99ca71607106","name":"Sticky Note5","type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[2730,640]},{"parameters":{"content":"## Resumo de grupos automatico","height":858.267172494289,"width":2410.2669752931133,"color":7},"id":"5d5b9adb-d981-48d3-9d67-55f4f6bf681c","name":"Sticky Note6","type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[640,340]},{"parameters":{"content":"## Pegar id dos grupos","height":270.7476350884495,"width":382.28317486454284,"color":7},"id":"3c9bb642-950f-4739-bdc5-8924b52e6eb8","name":"Sticky Note7","type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[732,826]},{"parameters":{"content":"## Altere aqui","height":251.9159908779343,"width":626.8911593937048,"color":3},"id":"a7520b7b-680f-40d8-9d52-e45da5e8f23a","name":"Sticky Note8","type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[723,440]},{"parameters":{"modelId":{"__rl":true,"value":"gpt-4o-mini","mode":"list","cachedResultName":"GPT-4O-MINI"},"messages":{"values":[{"content":"=Histórico de mensagens:\n{{ JSON.stringify($('Juntando Mensagens').item.json['Mensagens do grupo']) }}"},{"content":"Você será responsável por criar resumos dinâmicos das conversas do grupo, repassando as informações de forma clara e bem estruturada.\n\nSua missão é gerar uma mensagem concisa, com um toque de humor leve e profissional (nada de exageros ou tecnicismos). Sempre que possível, mencione o nome de quem fez a pergunta ou deu a resposta (caso não encontre o nome, use o número de telefone). Jamais invente informações, baseie-se exclusivamente nos dados disponíveis. Organize a mensagem com tópicos, destacando os pontos mais relevantes e importantes do dia. Use emojis, mas com moderação.\n\nAbaixo estão alguns elementos básicos que você pode usar como referência para estruturar sua mensagem, mas lembre-se de criar algo único e adaptado à conversa.\n\n📝 Principais Tópicos de hoje:\n\n📌 Título do Tópico X:\n\nDescrição do que aconteceu aqui\nDescrição do que rolou lá\nAlgo interessante que foi discutido\nResumo de uma solução ou ideia apresentada\n(Adapte quantos tópicos achar necessário, sempre focando no que foi mais importante e interessante!)\n\n✨ Clima do Grupo: O clima hoje foi focado e produtivo, com um toque de descontração que deixou tudo mais leve. Vamos nessa, equipe! 🚀\n\n🤝 Continue Participando: Tem alguma dúvida ou sugestão? Fique à vontade para compartilhar, a galera sempre está disposta a ajudar!\n\nLembre-se de manter um tom amigável e direto, sem perder o foco nas informações essenciais. Nada de humor forçado, apenas o necessário para deixar a mensagem leve e agradável.","role":"assistant"}]},"options":{}},"id":"d20ca6c4-a9f5-4b4c-b4dd-7ec7714c30a6","name":"Gera resumo","type":"@n8n/n8n-nodes-langchain.openAi","typeVersion":1.6,"position":[1592,920],"credentials":{"openAiApi":{"id":"kx1vvIOZPPxBWitD","name":"openia Jamil"}}}],"connections":{"Top 3 membros":{"main":[[{"node":"Total de mensagens","type":"main","index":0}]]},"Separa as mensagens de hoje":{"main":[[{"node":"Juntando Mensagens","type":"main","index":0}]]},"Pegando mensagens do grupo":{"main":[[{"node":"Separa as mensagens de hoje","type":"main","index":0}]]},"Juntando Mensagens":{"main":[[{"node":"Top 3 membros","type":"main","index":0}]]},"Total de mensagens":{"main":[[{"node":"Mensagem de Total de mensagens","type":"main","index":0}]]},"Mensagem de Total de mensagens":{"main":[[{"node":"Gera resumo","type":"main","index":0}]]},"Enviando mensagem 2":{"main":[[{"node":"Espera 30 segundos","type":"main","index":0}]]},"Loop Over Items":{"main":[[{"node":"FIM","type":"main","index":0}],[{"node":"Tratando dados do loop","type":"main","index":0}]]},"Tratando dados do loop":{"main":[[{"node":"Pegando mensagens do grupo","type":"main","index":0}]]},"Enviando mensagem 1":{"main":[[{"node":"Espera 2 segundos","type":"main","index":0}]]},"Iniciar todas 22h":{"main":[[{"node":"Credenciais","type":"main","index":0}]]},"Credenciais":{"main":[[{"node":"Grupos","type":"main","index":0}]]},"Espera 2 segundos":{"main":[[{"node":"Enviando mensagem 2","type":"main","index":0}]]},"Espera 30 segundos":{"main":[[{"node":"Loop Over Items","type":"main","index":0}]]},"Grupos":{"main":[[{"node":"Loop Over Items","type":"main","index":0}]]},"Gera resumo":{"main":[[{"node":"Enviando mensagem 1","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":{"node:Iniciar todas 22h":{"recurrenceRules":[]}},"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"a0053ce9-0d9a-4a90-8207-c44c9d81c852","triggerCount":1,"shared":[{"createdAt":"2024-12-19T14:37:29.879Z","updatedAt":"2024-12-19T14:37:29.879Z","role":"workflow:owner","workflowId":"FQJLyuz0p5kBjQ5i","projectId":"86fLtGJ4RKYxddia"}],"tags":[]}