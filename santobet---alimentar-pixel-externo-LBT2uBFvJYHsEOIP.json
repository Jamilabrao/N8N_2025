{"createdAt":"2025-05-14T15:29:34.467Z","updatedAt":"2025-05-14T22:27:54.942Z","id":"LBT2uBFvJYHsEOIP","name":"SANTOBET - ALIMENTAR PIXEL EXTERNO","active":false,"nodes":[{"parameters":{},"type":"n8n-nodes-base.manualTrigger","typeVersion":1,"position":[-600,40],"id":"dfc78026-f5cc-4e23-8342-7571789be583","name":"When clicking ‘Test workflow’"},{"parameters":{"method":"POST","url":"https://graph.facebook.com/v18.0/1890143345135100/events?access_token=EAADcc47ScJYBO01QEbBeXrm7C3jvJjA8LRWv4NGIWS0DvctTmaZA052ZCqZCRZAl3FE1YDZCA76igg3ZCqehEvkCslTGJxZBirfHEGxuk3mWzs5ljxZAujkRfuC7X81CH7XXnoyf1FfJhtk3AUEoMKKqIIHBhV7PI5lBlV43V4ePGnqeh0oGVmZC4E1ILQMR8BtFd5gZDZD","sendBody":true,"specifyBody":"json","jsonBody":"={\n  \"data\": [\n    {\n      \"event_name\": \"Deposit\",\n      \"event_time\": {{ Math.floor(new Date($json.data.replace(/(\\d{2})-(\\d{2})-(\\d{4})\\s-\\s(\\d{2}:\\d{2})/, '$3-$2-$1T$4-03:00')).getTime() / 1000) }},\n      \"event_source_url\": \"https://santo.bet/\",\n      \"user_data\": {\n        \"em\": \"{{ $json.email_hash }}\",\n        \"ph\": \"{{ $json.phone_hash }}\"\n      },\n      \"custom_data\": {\n        \"currency\": \"BRL\",\n        \"value\": {{ parseFloat($json.valor) || 0 }}\n      }\n    }\n  ]\n}","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[480,260],"id":"b3c87068-b4c9-43c9-8cbb-e89f54219e22","name":"HTTP Request"},{"parameters":{"documentId":{"__rl":true,"value":"1gkiZcv4TIQVnSZTyGz6kzO3T-sACsUeDgGMXvOInhME","mode":"list","cachedResultName":"SANTOBET - WEBHOOK","cachedResultUrl":"https://docs.google.com/spreadsheets/d/1gkiZcv4TIQVnSZTyGz6kzO3T-sACsUeDgGMXvOInhME/edit?usp=drivesdk"},"sheetName":{"__rl":true,"value":1427298924,"mode":"list","cachedResultName":"DEPOSITO PAGO","cachedResultUrl":"https://docs.google.com/spreadsheets/d/1gkiZcv4TIQVnSZTyGz6kzO3T-sACsUeDgGMXvOInhME/edit#gid=1427298924"},"options":{}},"type":"n8n-nodes-base.googleSheets","typeVersion":4.5,"position":[-360,40],"id":"0358712a-bf15-41d4-b01b-b26ecb88578d","name":"Google Sheets","credentials":{"googleSheetsOAuth2Api":{"id":"9W9MbbOmOV6F5Huv","name":"N8N - SHEET"}}},{"parameters":{"assignments":{"assignments":[{"id":"e5874061-832c-47af-b827-e7a7b7d2123f","name":"email","value":"={{ $json.EMAIL }}","type":"string"},{"id":"ea79e306-93d7-474c-8915-c32e49c7d6ff","name":"phone","value":"={{ \"+55\" + $json.TELEFONE.replace(/\\D/g, \"\") }}","type":"string"},{"id":"17295034-d1ee-4e6f-a972-3e6bbeb47256","name":"data","value":"={{ $json.DATA }}","type":"string"},{"id":"e033bda5-0c7d-4650-852c-3e18f0818292","name":"valor","value":"={{ $json[' VALOR '] }}","type":"number"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[80,260],"id":"b8bf1e6c-66f9-4583-81a1-0e417edf71c7","name":"Edit Fields"},{"parameters":{"jsCode":"// Função SHA-256 em JavaScript puro\nfunction sha256(str) {\n  // Normalizar: remover espaços e converter para minúsculas\n  str = str.trim().toLowerCase();\n\n  // Função para converter string em array de bytes (substitui TextEncoder)\n  function stringToBytes(str) {\n    const bytes = [];\n    for (let i = 0; i < str.length; i++) {\n      const char = str.charCodeAt(i);\n      bytes.push(char & 0xff);\n    }\n    return bytes;\n  }\n\n  // Funções auxiliares para SHA-256\n  function rightRotate(n, x) {\n    return (x >>> n) | (x << (32 - n));\n  }\n\n  const K = [\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n  ];\n\n  // Inicializar variáveis de hash\n  let H = [\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,\n    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n  ];\n\n  // Converter string em bytes\n  let msg = stringToBytes(str);\n\n  // Padding\n  const origLen = msg.length * 8;\n  msg.push(0x80);\n  while (msg.length % 64 !== 56) {\n    msg.push(0x00);\n  }\n  // Adicionar comprimento da mensagem\n  for (let i = 7; i >= 0; i--) {\n    msg.push((origLen >>> (i * 8)) & 0xff);\n  }\n\n  // Processar mensagem em blocos de 64 bytes\n  for (let i = 0; i < msg.length; i += 64) {\n    const w = new Array(64);\n    for (let t = 0; t < 16; t++) {\n      w[t] = (msg[i + t * 4] << 24) | (msg[i + t * 4 + 1] << 16) |\n             (msg[i + t * 4 + 2] << 8) | (msg[i + t * 4 + 3]);\n    }\n    for (let t = 16; t < 64; t++) {\n      const s0 = rightRotate(7, w[t - 15]) ^ rightRotate(18, w[t - 15]) ^ (w[t - 15] >>> 3);\n      const s1 = rightRotate(17, w[t - 2]) ^ rightRotate(19, w[t - 2]) ^ (w[t - 2] >>> 10);\n      w[t] = (w[t - 16] + s0 + w[t - 7] + s1) | 0;\n    }\n\n    let [a, b, c, d, e, f, g, h] = H;\n    for (let t = 0; t < 64; t++) {\n      const S1 = rightRotate(6, e) ^ rightRotate(11, e) ^ rightRotate(25, e);\n      const ch = (e & f) ^ (~e & g);\n      const temp1 = (h + S1 + ch + K[t] + w[t]) | 0;\n      const S0 = rightRotate(2, a) ^ rightRotate(13, a) ^ rightRotate(22, a);\n      const maj = (a & b) ^ (a & c) ^ (b & c);\n      const temp2 = (S0 + maj) | 0;\n\n      h = g;\n      g = f;\n      f = e;\n      e = (d + temp1) | 0;\n      d = c;\n      c = b;\n      b = a;\n      a = (temp1 + temp2) | 0;\n    }\n\n    H[0] = (H[0] + a) | 0;\n    H[1] = (H[1] + b) | 0;\n    H[2] = (H[2] + c) | 0;\n    H[3] = (H[3] + d) | 0;\n    H[4] = (H[4] + e) | 0;\n    H[5] = (H[5] + f) | 0;\n    H[6] = (H[6] + g) | 0;\n    H[7] = (H[7] + h) | 0;\n  }\n\n  // Converter hash final para hexadecimal\n  let hash = '';\n  for (let i = 0; i < 8; i++) {\n    for (let j = 3; j >= 0; j--) {\n      hash += ((H[i] >>> (j * 8)) & 0xff).toString(16).padStart(2, '0');\n    }\n  }\n  return hash;\n}\n\n// Função principal para processar itens\nfunction main() {\n  const items = $input.all();\n  for (const item of items) {\n    item.json.email_hash = sha256(item.json.email || '');\n    item.json.phone_hash = sha256(item.json.phone || '');\n  }\n  return items;\n}\n\n// Executar a função principal\nreturn main();"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[280,260],"id":"02dfd1d0-15c8-4034-8080-59d63a82a546","name":"Code"},{"parameters":{"jsCode":"// Função SHA-256 em JavaScript puro\nfunction sha256(str) {\n  // Normalizar: remover espaços e converter para minúsculas\n  str = str.trim().toLowerCase();\n\n  // Função para converter string em array de bytes (substitui TextEncoder)\n  function stringToBytes(str) {\n    const bytes = [];\n    for (let i = 0; i < str.length; i++) {\n      const char = str.charCodeAt(i);\n      bytes.push(char & 0xff);\n    }\n    return bytes;\n  }\n\n  // Funções auxiliares para SHA-256\n  function rightRotate(n, x) {\n    return (x >>> n) | (x << (32 - n));\n  }\n\n  const K = [\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n  ];\n\n  // Inicializar variáveis de hash\n  let H = [\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,\n    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n  ];\n\n  // Converter string em bytes\n  let msg = stringToBytes(str);\n\n  // Padding\n  const origLen = msg.length * 8;\n  msg.push(0x80);\n  while (msg.length % 64 !== 56) {\n    msg.push(0x00);\n  }\n  // Adicionar comprimento da mensagem\n  for (let i = 7; i >= 0; i--) {\n    msg.push((origLen >>> (i * 8)) & 0xff);\n  }\n\n  // Processar mensagem em blocos de 64 bytes\n  for (let i = 0; i < msg.length; i += 64) {\n    const w = new Array(64);\n    for (let t = 0; t < 16; t++) {\n      w[t] = (msg[i + t * 4] << 24) | (msg[i + t * 4 + 1] << 16) |\n             (msg[i + t * 4 + 2] << 8) | (msg[i + t * 4 + 3]);\n    }\n    for (let t = 16; t < 64; t++) {\n      const s0 = rightRotate(7, w[t - 15]) ^ rightRotate(18, w[t - 15]) ^ (w[t - 15] >>> 3);\n      const s1 = rightRotate(17, w[t - 2]) ^ rightRotate(19, w[t - 2]) ^ (w[t - 2] >>> 10);\n      w[t] = (w[t - 16] + s0 + w[t - 7] + s1) | 0;\n    }\n\n    let [a, b, c, d, e, f, g, h] = H;\n    for (let t = 0; t < 64; t++) {\n      const S1 = rightRotate(6, e) ^ rightRotate(11, e) ^ rightRotate(25, e);\n      const ch = (e & f) ^ (~e & g);\n      const temp1 = (h + S1 + ch + K[t] + w[t]) | 0;\n      const S0 = rightRotate(2, a) ^ rightRotate(13, a) ^ rightRotate(22, a);\n      const maj = (a & b) ^ (a & c) ^ (b & c);\n      const temp2 = (S0 + maj) | 0;\n\n      h = g;\n      g = f;\n      f = e;\n      e = (d + temp1) | 0;\n      d = c;\n      c = b;\n      b = a;\n      a = (temp1 + temp2) | 0;\n    }\n\n    H[0] = (H[0] + a) | 0;\n    H[1] = (H[1] + b) | 0;\n    H[2] = (H[2] + c) | 0;\n    H[3] = (H[3] + d) | 0;\n    H[4] = (H[4] + e) | 0;\n    H[5] = (H[5] + f) | 0;\n    H[6] = (H[6] + g) | 0;\n    H[7] = (H[7] + h) | 0;\n  }\n\n  // Converter hash final para hexadecimal\n  let hash = '';\n  for (let i = 0; i < 8; i++) {\n    for (let j = 3; j >= 0; j--) {\n      hash += ((H[i] >>> (j * 8)) & 0xff).toString(16).padStart(2, '0');\n    }\n  }\n  return hash;\n}\n\n// Função principal para processar itens\nfunction main() {\n  const items = $input.all();\n  for (const item of items) {\n    item.json.email_hash = sha256(item.json.email || '');\n    item.json.phone_hash = sha256(item.json.phone || '');\n  }\n  return items;\n}\n\n// Executar a função principal\nreturn main();"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[320,-160],"id":"fd1e514c-5f31-419c-94b7-f6bc381f6c4a","name":"Code1"},{"parameters":{"assignments":{"assignments":[{"id":"9d992702-15fb-4900-bc8f-4e3ac5ba5663","name":"EMAIL","value":"={{ $json.EMAIL }}","type":"string"},{"id":"451f7477-f795-4b7f-a623-3a231b9ea25c","name":"TELEFONE","value":"={{ $json.TELEFONE }}","type":"string"},{"id":"47331655-6fee-40c0-be45-631db8e21fd5","name":"DATA","value":"={{ \n  (() => {\n    const dataBruta = $json.DATA.split(' ')[0]; // \"24/02/2025\"\n    const [dia, mes, ano] = dataBruta.split('/');\n    return `${mes}/${dia}/${ano}`; // \"02/24/2025\"\n  })() \n}}","type":"string"},{"id":"02ec8e29-b4ca-4067-bc0e-686cadec79ee","name":" VALOR ","value":"={{ $json[' VALOR '] }}","type":"number"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[180,-420],"id":"43427bdf-dfa4-4e33-b730-3b15841244f8","name":"Edit Fields1"},{"parameters":{"jsCode":"return items.filter(item => {\n  const dataBruta = item.json[\"DATA\"];\n  if (!dataBruta) return false;\n\n  try {\n    // Divide em [\"07-05-2025\", \"00:00\"]\n    const partes = dataBruta.trim().split(' - ');\n    if (partes.length !== 2) return false;\n\n    const [dia, mes, ano] = partes[0].split('-');\n    const hora = partes[1];\n    \n    // Monta data no formato ISO para o JS entender\n    const dataConvertida = new Date(`${ano}-${mes}-${dia}T${hora}`);\n\n    const dataCorte = new Date(\"2025-05-14T00:00\");\n\n    return dataConvertida > dataCorte;\n  } catch (e) {\n    return false;\n  }\n});\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-140,40],"id":"08f15aec-decc-4d2d-a1d8-a34a7159b306","name":"Code2"},{"parameters":{"maxItems":30},"type":"n8n-nodes-base.limit","typeVersion":1,"position":[80,40],"id":"be673443-2ffd-4cd1-a0c4-f21e2ff2e5a5","name":"Limit"},{"parameters":{"options":{}},"type":"n8n-nodes-base.splitInBatches","typeVersion":3,"position":[-140,240],"id":"cc6550fa-df4a-426e-b20c-d272c21f396f","name":"Loop Over Items"}],"connections":{"When clicking ‘Test workflow’":{"main":[[{"node":"Google Sheets","type":"main","index":0}]]},"Google Sheets":{"main":[[{"node":"Code2","type":"main","index":0}]]},"Edit Fields":{"main":[[{"node":"Code","type":"main","index":0}]]},"Code":{"main":[[{"node":"HTTP Request","type":"main","index":0}]]},"Edit Fields1":{"main":[[]]},"Code2":{"main":[[{"node":"Limit","type":"main","index":0}]]},"Limit":{"main":[[{"node":"Loop Over Items","type":"main","index":0}]]},"Loop Over Items":{"main":[[],[{"node":"Edit Fields","type":"main","index":0}]]},"HTTP Request":{"main":[[{"node":"Loop Over Items","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"561227af-579e-4d13-9ab1-92546e2a58f4","triggerCount":0,"tags":[]}